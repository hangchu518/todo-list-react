{"version":3,"sources":["redux/types.ts","redux/actions.ts","components/NewItemForm.tsx","components/TodoItemDetails.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","redux/reducers.ts","redux/store.ts","index.tsx"],"names":["todoListActionTypes","toggleAllItems","type","payload","doneOn","Date","NewItemForm","dispatch","useDispatch","useState","input","setInput","typing","setTyping","createItemFormRef","useRef","dispatchAddItemAction","name","id","uuid","createdOn","clearForm","current","reset","toggleAllItemsButton","onClick","createItemForm","ref","onSubmit","e","preventDefault","placeholder","onFocus","onChange","target","value","onBlur","clearFormButton","className","Fragment","formatDate","date","moment","format","TodoItemDetails","props","done","updatedOn","style","TodoItem","editingMode","setEditingMode","editedItemName","setEditedItemName","showItemDetails","setShowItemDetails","quitEditingMode","dispatchUpdateItemAction","updateItem","dispatchDeleteItemAction","toggleItemCheckbox","checked","updateItemInput","autoFocus","onKeyUp","key","itemLabelClasses","classNames","itemLabel","deleteItemButton","showItemDetailsButton","TodoList","items","useSelector","state","todoList","todoItemJSXElements","map","item","length","App","header","href","now","initialState","undefined","rootReducer","combineReducers","action","newItem","updatedItems","filter","numItems","numDoneItems","message","store","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16015968.chunk.js","sourcesContent":["export interface TodoItemType {\n    name: string;\n    done: boolean;\n    id: string;\n    createdOn: Date;\n    doneOn: Date | undefined;\n    updatedOn: Date;\n}\n\nexport interface TodoListState {\n    items: TodoItemType[];\n}\n\nexport const todoListActionTypes = {\n    ADD_ITEM: 'ADD_ITEM',\n    DELETE_ITEM: 'DELETE_ITEM',\n    DELETE_ALL_ITEMS: 'DELETE_ALL_ITEMS',\n    TOGGLE_ITEM: 'TOGGLE_ITEM',\n    TOGGLE_ALL_ITEMS: 'TOGGLE_ALL_ITEMS',\n    UPDATE_ITEM: 'UPDATE_ITEM',\n};\n\nexport interface AddItemAction {\n    type: typeof todoListActionTypes.ADD_ITEM;\n    payload: {\n        name: string;\n        id: string;\n        createdOn: Date;\n    };\n}\n\nexport interface DeleteItemAction {\n    type: typeof todoListActionTypes.DELETE_ITEM;\n    payload: {\n        id: string;\n    };\n}\n\nexport interface DeleteAllItemsAction {\n    type: typeof todoListActionTypes.DELETE_ALL_ITEMS;\n}\n\nexport interface ToggleAllItemsAction {\n    type: typeof todoListActionTypes.TOGGLE_ALL_ITEMS;\n    payload: {\n        doneOn: Date;\n    };\n}\n\nexport interface ToggleItemAction {\n    type: typeof todoListActionTypes.TOGGLE_ITEM;\n    payload: {\n        id: string;\n        doneOn: Date;\n    };\n}\n\nexport interface UpdateItemAction {\n    type: typeof todoListActionTypes.UPDATE_ITEM;\n    payload: {\n        id: string;\n        name: string;\n        updatedOn: Date;\n    };\n}\n\nexport type TodoListAction =\n    | AddItemAction\n    | DeleteItemAction\n    | DeleteAllItemsAction\n    | ToggleItemAction\n    | ToggleAllItemsAction\n    | UpdateItemAction;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddItemAction,\n    DeleteAllItemsAction,\n    DeleteItemAction,\n    todoListActionTypes,\n    ToggleAllItemsAction,\n    ToggleItemAction,\n    UpdateItemAction,\n} from './types';\n\nexport const addItem = (name: string): AddItemAction => {\n    return {\n        type: todoListActionTypes.ADD_ITEM,\n        payload: {\n            name: name,\n            id: uuid(),\n            createdOn: new Date(),\n        },\n    };\n};\n\nexport const deleteItem = (id: string): DeleteItemAction => {\n    return {\n        type: todoListActionTypes.DELETE_ITEM,\n        payload: {\n            id: id,\n        },\n    };\n};\n\nexport const deleteAllItems = (): DeleteAllItemsAction => {\n    return {\n        type: todoListActionTypes.DELETE_ALL_ITEMS,\n    };\n};\n\nexport const toggleAllItems = (): ToggleAllItemsAction => {\n    return {\n        type: todoListActionTypes.TOGGLE_ALL_ITEMS,\n        payload: {\n            doneOn: new Date(),\n        },\n    };\n};\n\nexport const toggleItem = (id: string): ToggleItemAction => {\n    return {\n        type: todoListActionTypes.TOGGLE_ITEM,\n        payload: {\n            id: id,\n            doneOn: new Date(),\n        },\n    };\n};\n\nexport const updateItem = ({\n    id,\n    name,\n}: {\n    id: string;\n    name: string;\n}): UpdateItemAction => {\n    return {\n        type: todoListActionTypes.UPDATE_ITEM,\n        payload: {\n            id: id,\n            name: name,\n            updatedOn: new Date(),\n        },\n    };\n};\n","import React, { useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addItem, toggleAllItems } from '../redux/actions';\n\nconst NewItemForm = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const [input, setInput] = useState('');\n    const [typing, setTyping] = useState(false);\n    const createItemFormRef = useRef<HTMLFormElement>(null);\n\n    const dispatchAddItemAction = (): void => {\n        dispatch(addItem(input));\n    };\n\n    const dispatchToggleAllItemsAction = (): void => {\n        dispatch(toggleAllItems());\n    };\n\n    const clearForm = (): void => {\n        setInput('');\n        setTyping(false);\n        if (createItemFormRef.current) {\n            createItemFormRef.current.reset();\n        }\n    };\n\n    // handle submit event for createItemForm element\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        dispatchAddItemAction();\n        clearForm();\n    };\n\n    // handle focus event for the input element inside createItemForm element\n    const handleFocus = (): void => {\n        setTyping(true);\n    };\n\n    // handle change event for the input element inside createItemForm element\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setInput(e.target.value);\n    };\n\n    // handle focusout event for the input element inside createItemForm element\n    const handleFocusOut = (): void => {\n        if (!input) {\n            setTyping(false);\n        }\n    };\n\n    const toggleAllItemsButton = (\n        <input\n            id=\"toggle-all-items-button\"\n            type=\"checkbox\"\n            onClick={dispatchToggleAllItemsAction}\n        />\n    );\n\n    const createItemForm = (\n        <form id=\"create-item-form\" ref={createItemFormRef} onSubmit={handleSubmit}>\n            <input\n                id=\"create-item-input\"\n                type=\"text\"\n                placeholder=\"Add a new item\"\n                onFocus={handleFocus}\n                onChange={handleChange}\n                onBlur={handleFocusOut}\n                value={input}\n            />\n            {typing && (\n                <button id=\"create-item-button\" type=\"submit\">\n                    +\n                </button>\n            )}\n        </form>\n    );\n\n    const clearFormButton = (\n        <button className=\"x-button\" onClick={clearForm}>\n            x\n        </button>\n    );\n\n    return (\n        <React.Fragment>\n            {toggleAllItemsButton}\n            {createItemForm}\n            {clearFormButton}\n        </React.Fragment>\n    );\n};\n\nexport default NewItemForm;\n","import moment from 'moment';\nimport React from 'react';\n\nimport { TodoItemType } from '../redux/types';\n\ninterface TodoItemDetailsProps extends Omit<TodoItemType, 'name' | 'id'> {}\n\nconst formatDate = (date: Date): string =>\n    moment(date).format('MMMM Do YYYY, h:mm:ss a');\n\nconst TodoItemDetails: React.FC<TodoItemDetailsProps> = (\n    props: TodoItemDetailsProps\n): JSX.Element => {\n    const { done, createdOn, doneOn, updatedOn } = props;\n    const style = {\n        'marginLeft': 'calc(1rem + 0.5vw)',\n    };\n    return (\n        <React.Fragment>\n            <li style={style}>Created on: &nbsp; {formatDate(createdOn)}</li>\n            {done && (\n                <li style={style}>Done on: &nbsp; {formatDate(doneOn as Date)}</li>\n            )}\n            <li style={style}>Updated on: &nbsp; {formatDate(updatedOn)}</li>\n        </React.Fragment>\n    );\n};\n\nexport default TodoItemDetails;\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteItem, toggleItem, updateItem } from '../redux/actions';\nimport { TodoItemType } from '../redux/types';\nimport TodoItemDetails from './TodoItemDetails';\n\ntype TodoItemProps = TodoItemType;\n\nconst TodoItem: React.FC<TodoItemProps> = (props: TodoItemProps): JSX.Element => {\n    const dispatch = useDispatch();\n    const [editingMode, setEditingMode] = useState(false);\n    const [editedItemName, setEditedItemName] = useState('');\n    const [showItemDetails, setShowItemDetails] = useState(false);\n\n    const quitEditingMode = (): void => {\n        setEditingMode(false);\n        setEditedItemName(props.name);\n    };\n\n    const dispatchToggleItemAction = (): void => {\n        dispatch(toggleItem(props.id));\n    };\n\n    const dispatchUpdateItemAction = (): void => {\n        dispatch(updateItem({ id: props.id, name: editedItemName }));\n    };\n\n    const dispatchDeleteItemAction = (): void => {\n        dispatch(deleteItem(props.id));\n    };\n\n    // handle keyup event for updateItemInput element\n    const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n        if (e.key === 'Enter') {\n            if (editedItemName) {\n                dispatchUpdateItemAction();\n            } else {\n                dispatchDeleteItemAction();\n            }\n            quitEditingMode();\n        } else if (e.key === 'Escape') {\n            quitEditingMode();\n        }\n    };\n\n    // handle focusout event for updateItemInput element\n    const handleFocusOut = (): void => {\n        if (editedItemName) {\n            dispatchUpdateItemAction();\n        } else {\n            dispatchDeleteItemAction();\n        }\n        quitEditingMode();\n    };\n\n    // handle change event for updateItemInput element\n    const handleTyping = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setEditedItemName(e.target.value);\n    };\n\n    // handle click event for itemLabel element\n    const startTyping = (): void => {\n        setEditingMode(true);\n    };\n\n    // handle click event for showItemDetailsButton element\n    const toggleShowItemDetails = (): void => {\n        setShowItemDetails(!showItemDetails);\n    };\n\n    const toggleItemCheckbox = (\n        <input\n            type=\"checkbox\"\n            className=\"toggle-item-checkbox\"\n            onChange={dispatchToggleItemAction}\n            checked={props.done}\n        />\n    );\n\n    const updateItemInput = (\n        <input\n            autoFocus\n            type=\"text\"\n            value={editedItemName}\n            onKeyUp={handleKeyUp}\n            onBlur={handleFocusOut}\n            className=\"update-item-input\"\n            onChange={handleTyping}\n        />\n    );\n\n    const itemLabelClasses = classNames({\n        'item-label': true,\n        'item-strikethrough': props.done,\n    });\n\n    const itemLabel = (\n        <label onClick={startTyping} className={itemLabelClasses}>\n            {props.name}\n        </label>\n    );\n\n    const deleteItemButton = (\n        <button className=\"x-button\" onClick={dispatchDeleteItemAction}>\n            x\n        </button>\n    );\n\n    const showItemDetailsButton = (\n        <button className=\"show-item-details-button\" onClick={toggleShowItemDetails}>\n            ...\n        </button>\n    );\n\n    if (!editingMode) {\n        return (\n            <React.Fragment>\n                <li>\n                    {toggleItemCheckbox}\n                    {itemLabel}\n                    {deleteItemButton}\n                    {showItemDetailsButton}\n                </li>\n                {showItemDetails && (\n                    <TodoItemDetails\n                        done={props.done}\n                        createdOn={props.createdOn}\n                        doneOn={props.doneOn}\n                        updatedOn={props.updatedOn}\n                    />\n                )}\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <li>\n                {toggleItemCheckbox}\n                {updateItemInput}\n                {deleteItemButton}\n            </li>\n        );\n    }\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteAllItems, toggleAllItems } from '../redux/actions';\nimport { RootState } from '../redux/store';\nimport { TodoItemType } from '../redux/types';\nimport NewItemForm from './NewItemForm';\nimport TodoItem from './TodoItem';\n\nconst TodoList: React.FC = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const items: TodoItemType[] = useSelector(\n        (state: RootState) => state.todoList.items\n    );\n\n    const dispatchDeleteAllItemsAction = (): void => {\n        dispatch(deleteAllItems());\n    };\n\n    const dispatchToggleAllItemsAction = (): void => {\n        dispatch(toggleAllItems());\n    };\n\n    const toggleAllItemsButton = (\n        <input\n            id=\"toggle-all-items-button\"\n            className=\"hide\"\n            type=\"checkbox\"\n            onClick={dispatchToggleAllItemsAction}\n        />\n    );\n\n    const todoItemJSXElements: JSX.Element[] = items.map(item => (\n        <TodoItem\n            name={item.name}\n            done={item.done}\n            id={item.id}\n            key={item.id}\n            createdOn={item.createdOn}\n            doneOn={item.doneOn}\n            updatedOn={item.updatedOn}\n        />\n    ));\n\n    return (\n        <div className=\"content-div\">\n            <div className=\"create-item-div\">\n                {items.length > 0 && toggleAllItemsButton}\n                <NewItemForm />\n            </div>\n            <div className=\"item-list-div\">\n                <br />\n                <ul>{todoItemJSXElements}</ul>\n            </div>\n            <a id=\"delete-all-items-button\" onClick={dispatchDeleteAllItemsAction}>\n                DELETE ALL\n            </a>\n        </div>\n    );\n};\n\nexport default TodoList;\n","import React from 'react';\n\nimport TodoList from './components/TodoList';\n\nconst App: React.FC = (): JSX.Element => {\n    const header = (\n        <div className=\"title-div\">\n            <span className=\"title\">\n                <a href=\"#\">Your Todo List</a>\n            </span>\n            <span className=\"author\">\n                <a href=\"https://cgao.info\">&nbsp; Chuntong Gao &nbsp;</a>\n            </span>\n        </div>\n    );\n\n    return (\n        <div className=\"app-container\">\n            {header}\n            <TodoList />\n        </div>\n    );\n};\n\nexport default App;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddItemAction,\n    DeleteItemAction,\n    TodoItemType,\n    TodoListAction,\n    todoListActionTypes,\n    TodoListState,\n    ToggleItemAction,\n    UpdateItemAction,\n} from './types';\n\nconst now: Date = new Date();\nconst initialState: TodoListState = {\n    items: [\n        {\n            name: 'This is a done message',\n            done: true,\n            id: uuid(),\n            createdOn: now,\n            doneOn: undefined,\n            updatedOn: now,\n        },\n        {\n            name: 'This is an undone message',\n            done: false,\n            id: uuid(),\n            createdOn: now,\n            doneOn: undefined,\n            updatedOn: now,\n        },\n    ],\n};\n\nexport default (\n    state: TodoListState = initialState,\n    action: TodoListAction\n): TodoListState => {\n    switch (action.type) {\n        case todoListActionTypes.ADD_ITEM: {\n            const { name, id, createdOn } = (action as AddItemAction).payload;\n            const newItem = {\n                name: name,\n                done: false,\n                id: id,\n                createdOn: createdOn,\n                doneOn: undefined,\n                updatedOn: createdOn,\n            };\n            return {\n                items: [...state.items, newItem],\n            };\n        }\n\n        case todoListActionTypes.DELETE_ITEM: {\n            const { id } = (action as DeleteItemAction).payload;\n            const updatedItems: TodoItemType[] = state.items.filter(\n                item => item.id !== id\n            );\n            return {\n                items: updatedItems,\n            };\n        }\n\n        case todoListActionTypes.DELETE_ALL_ITEMS: {\n            return {\n                items: [],\n            };\n        }\n\n        case todoListActionTypes.TOGGLE_ITEM: {\n            const updatedItems: TodoItemType[] = state.items.map(item => {\n                const { id, doneOn } = (action as ToggleItemAction).payload;\n                if (item.id === id) {\n                    if (item.done === true) {\n                        return { ...item, done: false, doneOn: undefined };\n                    } else {\n                        return { ...item, done: true, doneOn: doneOn };\n                    }\n                } else {\n                    return item;\n                }\n            });\n            return {\n                items: updatedItems,\n            };\n        }\n\n        case todoListActionTypes.TOGGLE_ALL_ITEMS: {\n            const numItems: number = state.items.length;\n            let numDoneItems = 0;\n\n            for (const message of state.items) {\n                if (message.done === true) {\n                    numDoneItems = numDoneItems + 1;\n                }\n            }\n\n            const updatedItems: TodoItemType[] = state.items.map(item => {\n                if (numDoneItems === numItems) {\n                    // If all items are done,\n                    // then make all items undone.\n                    return { ...item, done: false };\n                } else {\n                    // Otherwise make all items done.\n                    return { ...item, done: true };\n                }\n            });\n\n            return {\n                items: updatedItems,\n            };\n        }\n\n        case todoListActionTypes.UPDATE_ITEM: {\n            const updatedItems: TodoItemType[] = [...state.items];\n            const { id, name, updatedOn } = (action as UpdateItemAction).payload;\n            for (const message of updatedItems) {\n                if (message.id === id) {\n                    message.name = name;\n                    message.updatedOn = updatedOn;\n                }\n            }\n            return {\n                items: updatedItems,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n};\n","import { applyMiddleware, combineReducers, createStore, Middleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducers from './reducers';\n\nconst rootReducer = combineReducers({\n    todoList: reducers,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/explicit-module-boundary-types\nexport const configureStore = () => {\n    const middlewares: Middleware[] = [];\n    const middleWareEnhancer = applyMiddleware(...middlewares);\n    const store = createStore(rootReducer, composeWithDevTools(middleWareEnhancer));\n    return store;\n};\n","import './styles.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { configureStore } from './redux/store';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}